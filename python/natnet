#!/usr/bin/env python

import Tkinter
from terminal_colors import bcolors

from natnet_pipeline import NatNetPipeline
from default_readers import *
from default_writers import *

class NatNetGUI(object):
    def __init__(self):
        self.reader = None
        self.writer = None
        self.pipeline = None
        self.buildWindow()
        self.top.mainloop()

    def natnet_connect_button_handler(self):
        if self.reader is not None and self.writer is not None and self.pipeline is not None and self.reader.connected and self.writer.connected:
            self.pipeline.stop()
            self.natnet_link.configure(bg="red")
            self.natnet_connect_button.configure(text="connect")
        else:
            if self.natnet_host_input.get() == "":
                host = None
            else:
                host = self.natnet_host_input.get()

            if self.natnet_multi_input.get() == "":
                multicast = None
            else:
                multicast = self.natnet_multi_input.get()

            if self.natnet_port_input.get() == "":
                port = None
            else:
                port = self.natnet_port_input.get()

            if self.osc_port_input.get() == "":
                osc_port = None
            else:
                osc_port = self.osc_port_input.get()

            if host is not None and multicast is not None and port is not None:
                self.reader = LiveNatnetReader(host, multicast, port)
                if osc_port is None:
                    self.writer = OSCNatNetWriter(port=8080)
                else:
                    self.writer = OSCNatNetWriter(port=osc_port)
                self.pipeline = NatNetPipeline(self.reader, self.writer)
                self.pipeline.start()
                self.natnet_link.configure(bg="green")
                self.natnet_connect_button.configure(text="disconnect")

    def on_close(self):
        if self.pipeline is not None:
            self.pipeline.stop()
        self.top.destroy()

    def buildWindow(self):
        self.top = Tkinter.Tk()
        self.top.title("NatNet to OSC Communication == by David Jonas")
        self.top.geometry('1000x330')
        self.top.wm_protocol("WM_DELETE_WINDOW", self.on_close)

        self.natnet_block = Tkinter.Frame(self.top, padx=50, pady=50)

        self.natnet_label = Tkinter.Label(self.natnet_block, text="NatNet connection", font=("Helvetica", "16"), padx=20, pady=20)
        self.natnet_label.grid(column=0, row=0)

        self.natnet_host_input_panel = Tkinter.Frame(self.natnet_block)
        self.natnet_host_input_label = Tkinter.Label(self.natnet_host_input_panel, text="Host", width=20)
        self.natnet_host_input = Tkinter.Entry(self.natnet_host_input_panel, width=20)
        self.natnet_host_input.insert(0, "0.0.0.0")
        self.natnet_host_input_label.grid(column=0, row=0)
        self.natnet_host_input.grid(column=1, row=0)
        self.natnet_host_input_panel.grid(column=0, row=1)

        self.natnet_multi_input_panel = Tkinter.Frame(self.natnet_block)
        self.natnet_multi_input_label = Tkinter.Label(self.natnet_multi_input_panel, text="Multicast adress", width=20)
        self.natnet_multi_input = Tkinter.Entry(self.natnet_multi_input_panel, width=20)
        self.natnet_multi_input.insert(0, "239.255.42.99")
        self.natnet_multi_input_label.grid(column=0, row=0)
        self.natnet_multi_input.grid(column=1, row=0)
        self.natnet_multi_input_panel.grid(column=0, row=2)

        self.natnet_port_input_panel = Tkinter.Frame(self.natnet_block)
        self.natnet_port_input_label = Tkinter.Label(self.natnet_port_input_panel, text="port", width=20)
        self.natnet_port_input = Tkinter.Entry(self.natnet_port_input_panel, width=20)
        self.natnet_port_input.insert(0,"1511")
        self.natnet_port_input_label.grid(column=0, row=0)
        self.natnet_port_input.grid(column=1, row=0)
        self.natnet_port_input_panel.grid(column=0, row=3)

        self.natnet_connect_block = Tkinter.Frame(self.natnet_block)
        self.natnet_connect_button = Tkinter.Button(self.natnet_connect_block, text="Connect", command = self.natnet_connect_button_handler)
        self.natnet_link = Tkinter.Canvas(self.natnet_connect_block, width=20, height=20, bg="red")
        self.natnet_connect_button.grid(column=0, row=0)
        self.natnet_link.grid(column=1, row=0)
        self.natnet_connect_block.grid(column=0, row=4)

        self.osc_block = Tkinter.Frame(self.top, padx=50, pady=50)

        self.osc_label = Tkinter.Label(self.osc_block, text="OSC connection", font=("Helvetica", "16"), padx=20, pady=20)
        self.osc_label.grid(column=0, row=0)

        self.osc_host_input_panel = Tkinter.Frame(self.osc_block)
        self.osc_host_input_label = Tkinter.Label(self.osc_host_input_panel, text="Host", width=20)
        self.osc_host_input = Tkinter.Entry(self.osc_host_input_panel, width=20)
        self.osc_host_input.insert(0, "127.0.0.1")
        self.osc_host_input_label.grid(column=0, row=0)
        self.osc_host_input.grid(column=1, row=0)
        self.osc_host_input_panel.grid(column=0, row=1)

        self.osc_port_input_panel = Tkinter.Frame(self.osc_block)
        self.osc_port_input_label = Tkinter.Label(self.osc_port_input_panel, text="port", width=20)
        self.osc_port_input = Tkinter.Entry(self.osc_port_input_panel, width=20)
        self.osc_port_input.insert(0,"8080")
        self.osc_port_input_label.grid(column=0, row=0)
        self.osc_port_input.grid(column=1, row=0)
        self.osc_port_input_panel.grid(column=0, row=3)

        self.osc_connect_block = Tkinter.Frame(self.osc_block)
        self.osc_link = Tkinter.Canvas(self.osc_connect_block, width=20, height=20, bg="red")
        self.osc_connect_block.grid(column=0, row=4)

        self.natnet_block.grid(column=0, row=0)
        self.osc_block.grid(column=1, row=0)

n = NatNetGUI()
